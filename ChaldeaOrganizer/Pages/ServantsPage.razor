@page "/servants"

@using ChaldeaCommon.Models;
@using ChaldeaOrganizer.Pages.Components;
@using ChaldeaCommon.Interfaces;

@inject IDataService<GameData> GameDataService

<h3>Servants</h3>

<div style="padding:15px">
    <div class="row">
        @if (GameData.Servants != null)
        {
            foreach ((Servant servant, int i) in GameData.Servants.Select((servant, i) => (servant, i)))
            {
                <div class="col-sm-12 col-md-6" style="padding-top:10px; padding-bottom:10px">
                    <ServantComponent Servant="@servant"
                                      Key="@i"
                                      DeleteServant="@RemoveServant"
                                      Inventory="@GameData.Inventory"
                                      CompleteGoal="@RemoveGoal"
                                      ChangeInventoryMat="@ChangeInventoryMat" />
                </div>
            }
        }
    </div>
    <div class="row">
         <div class="col-sm-12 col-md-8">
             <input @bind="@newServantName" class="form-control" />
         </div>
        <div class="col-sm-12 col-md-4">
            <button type="button" class="btn btn-secondary" disabled="@CannotAddNewServant" @onclick="@AddServant">New Servant</button>
        </div>
    </div>
</div>

@code {
    GameData GameData;
    string newServantName;

    private bool CannotAddNewServant => string.IsNullOrWhiteSpace(newServantName) || GameData.Servants.Any(s => s.Name == newServantName);

    protected override async Task OnInitializedAsync()
    {
        GameData = await GameDataService.RetrieveData();
    }

    protected void RemoveServant(int index)
    {
        if (GameData.Servants.ElementAtOrDefault(index) != null)
        {
            GameData.Servants.RemoveAt(index);

            StateHasChanged();

            GameDataService.SaveData(GameData);
        }
    }

    protected void RemoveGoal(int servantIndex, int goalIndex)
    {
        if (GameData.Servants.ElementAt(servantIndex) != null
            && GameData.Servants[servantIndex].Goals.ElementAtOrDefault(goalIndex) != null)
        {
            foreach (var mat in GameData.Servants[servantIndex].Goals[goalIndex].Materials)
            {
                GameData.Inventory[mat.Key] -= mat.Value;
            }
            GameData.Servants[servantIndex].Goals.RemoveAt(goalIndex);

            GameDataService.SaveData(GameData);
        }
    }

    protected void ChangeInventoryMat(string material, int value)
    {
        // Check that mat exists
        if (value >= 0)
        {
            GameData.Inventory[material] = value;
            StateHasChanged();
            GameDataService.SaveData(GameData);
        }
    }

    protected void AddServant()
    {
        if (!CannotAddNewServant)
        {
            var newServant = new Servant()
            {
                Goals = Enumerable.Range(1, 4).Select(x => new Goal()
                {
                    Name = $"Ascension {x}",
                    Materials = new Dictionary<string, int>()
                }).ToList(),
                Name = newServantName
            };

            GameData.Servants.Add(newServant);
            newServantName = "";
            GameDataService.SaveData(GameData);
        }
    }

    protected void OnAddMaterial(int servantIndex, int goalIndex, string material, int quantity)
    {
        GameData.Servants[servantIndex].Goals[goalIndex].Materials[material] = quantity;
        //GameDataService.SaveData(GameData);
    }
}
