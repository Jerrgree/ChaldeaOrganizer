@page "/servants"

@using ChaldeaCommon.Models
@using ChaldeaOrganizer.Pages.Components
@using ChaldeaCommon.Interfaces
@using ChaldeaCommon.Enums

@inject IDataService<GameData> GameDataService

<h3>Servants</h3>

<div style="padding:15px">
    <div class="row">
        <ServantClassDropdown ChangeData="@SetFilter"
                              CurrentClass="@FilterClass" />
        <button class="btn btn-secondary" @onclick="@ClearFilter">Clear</button>
    </div>
    <div class="row">
        @if (GameData.Servants != null)
        {
            foreach ((Servant servant, int i) in GameData.Servants.Select((servant, i) => (servant, i)))
            {
                <div class="col-sm-12 col-md-6" style="padding-top:10px; padding-bottom:10px">
                    <ServantComponent Servant="@servant"
                                      Key="@i"
                                      DeleteServant="@RemoveServant"
                                      Inventory="@GameData.Inventory"
                                      CompleteGoal="@RemoveGoal"
                                      ChangeInventoryMat="@ChangeInventoryMat"
                                      AddMaterialToGoal="@OnAddMaterial"
                                      SaveData="@SaveGameData" />
                </div>
            }
        }
    </div>
    <div class="row">
        <div class="col-sm-12 col-md-8">
            <input @bind="@newServantName" class="form-control" />
        </div>
        <div class="col-sm-12 col-md-4">
            <button type="button" class="btn btn-secondary" disabled="@CannotAddNewServant" @onclick="@AddServant">New Servant</button>
        </div>
    </div>
</div>

@code {
    GameData GameData;
    string newServantName;

    private bool CannotAddNewServant => string.IsNullOrWhiteSpace(newServantName) || GameData.Servants.Any(s => s.Name == newServantName);

    private ServantClass? FilterClass;

    protected override async Task OnInitializedAsync()
    {
        await GetGameData();
    }

    protected void RemoveServant(int index)
    {
        if (GameData.Servants.ElementAtOrDefault(index) != null)
        {
            GameData.Servants.RemoveAt(index);

            StateHasChanged();

            GameDataService.SaveData(GameData);
        }
    }

    protected void RemoveGoal(int servantIndex, string goalName)
    {
        if (GameData.Servants.ElementAt(servantIndex) != null
            && GameData.Servants[servantIndex].Goals.Any(x => x.Name == goalName))
        {
            var goal = GameData.Servants[servantIndex].Goals.First(x => x.Name == goalName);
            foreach (var mat in goal.Materials)
            {
                GameData.Inventory[mat.Key] -= mat.Value;
            }
            GameData.Servants[servantIndex].Goals.Remove(goal);

            GameDataService.SaveData(GameData);
        }
    }

    protected void ChangeInventoryMat(string material, int value)
    {
        // Check that mat exists
        if (value >= 0)
        {
            GameData.Inventory[material] = value;
            StateHasChanged();
            GameDataService.SaveData(GameData);
        }
    }

    protected void AddServant()
    {
        if (!CannotAddNewServant)
        {
            var newServant = new Servant()
            {
                Goals = Enumerable.Range(1, 4).Select(x => new Goal()
                {
                    Name = $"Ascension {x}",
                    Materials = new Dictionary<string, int>()
                }).ToList(),
                Name = newServantName
            };

            GameData.Servants.Add(newServant);
            newServantName = "";
            GameDataService.SaveData(GameData);
        }
    }

    protected void OnAddMaterial(int servantIndex, string goalName, string material, int quantity)
    {
        if (GameData.Servants.ElementAtOrDefault(servantIndex) != null
            && GameData.Servants[servantIndex].Goals.Any(x => x.Name == goalName))
        {
            GameData.Servants[servantIndex].Goals.First(x => x.Name == goalName).Materials[material] = quantity;
            GameDataService.SaveData(GameData);
        }
    }

    protected void SaveGameData()
    {
        GameDataService.SaveData(GameData);
    }

    protected async Task ClearFilter()
    {
        FilterClass = null;

        await GetGameData();
    }

    protected async Task SetFilter(ServantClass servantClass)
    {

        FilterClass = servantClass;

        await GetGameData();
    }

    protected async Task GetGameData()
    {
        GameData = await GameDataService.RetrieveData();

        if (FilterClass != null)
        {
            GameData.Servants = GameData.Servants.Where(x => x.Class == FilterClass).ToList();
        }

        StateHasChanged();
    }
}