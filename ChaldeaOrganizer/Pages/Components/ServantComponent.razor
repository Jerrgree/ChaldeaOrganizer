@using ChaldeaCommon.Models
@using BlazorStrap
@using ChaldeaOrganizer.Pages.Components
@using ChaldeaCommon.Enums

@if (Servant != null)
{
    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col-sm-8">
                    <h5>@Servant.Name</h5>
                    <ServantClassDropdown CurrentClass="@Servant.Class" ChangeData="@ChangeClass" />
                </div>
                <div class="col-sm-4">
                    <button class="btn btn-danger float-right" type="button"><span class="oi oi-trash" aria-hidden="true" @onclick="@OnDeleteServant" /></button>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (Servant.Goals != null && Servant.Goals.Count > 0)
            {
                <BSTabGroup>
                    <BSTabList>
                        @foreach ((Goal goal, int i) in Servant.Goals.Select((goal, i) => (goal, i)))
                        {
                            <BSTab @key="@string.Format("{0}_{1}", Servant.Name, goal.Name)">
                                <BSTabLabel>@goal.Name</BSTabLabel>
                                <BSTabContent>
                                    <GoalComponent Goal="@goal"
                                                   Key="@goal.Name"
                                                   CompleteGoal="@OnCompleteGoal"
                                                   Inventory="@Inventory"
                                                   ChangeInventoryMat="@ChangeInventoryMat"
                                                   AddMaterialToGoal="@OnAddMaterialToGoal" />
                                </BSTabContent>
                            </BSTab>
                        }
                    </BSTabList>
                    <BSTabSelectedContent />
                </BSTabGroup>
            }
        </div>
        <div class="card-footer">
            <form>
                <div class="row">
                    <div class="col-sm-12 col-md-8">
                        <input type="text" class="form-control" @bind="@newGoalName" />
                    </div>
                    <div class="col-sm-12 col-md-4">
                        <button type="button" class="btn btn-primary" @onclick="@OnAddGoal" disabled="@CannotAddGoal">New Goal</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
}

@code {
    #region Parameters
    [Parameter]
    public Servant Servant { get; set; }

    [Parameter]
    public Action<int> DeleteServant { get; set; }

    [Parameter]
    public int Key { get; set; }

    [Parameter]
    public Dictionary<string, int> Inventory { get; set; }

    [Parameter]
    public Action<int, string> CompleteGoal { get; set; }

    [Parameter]
    public Action<string, int> ChangeInventoryMat { get; set; }

    [Parameter]
    public Action<int, string, string, int> AddMaterialToGoal { get; set; }

    [Parameter]
    public Action SaveData { get; set; }
    #endregion

    string newGoalName { get; set; } = "";

    void OnDeleteServant()
    {
        DeleteServant?.Invoke(Key);
    }

    private bool CannotAddGoal => Servant.Goals.Any(x => x.Name == newGoalName);

    private void OnAddGoal()
    {
        if (!CannotAddGoal)
        {
            Servant.Goals.Add(new Goal()
            {
                Name = newGoalName,
                Materials = new Dictionary<string, int>()
            });

            newGoalName = "";
        }
    }

    void OnCompleteGoal(string goalName)
    {
        CompleteGoal?.Invoke(Key, goalName);

        StateHasChanged();
    }

    void OnAddMaterialToGoal(string goalName, string material, int quantity)
    {
        AddMaterialToGoal?.Invoke(Key, goalName, material, quantity);
    }

    Task ChangeClass(ServantClass newClass)
    {
        Servant.Class = newClass;

        SaveData?.Invoke();

        return Task.FromResult(true);
    }
}