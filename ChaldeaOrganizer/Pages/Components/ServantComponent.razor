@using ChaldeaCommon.Models;
@using BlazorStrap;
@using ChaldeaOrganizer.Pages.Components;

@if (Servant != null)
{
    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col-sm-8">
                    <h5>@Servant.Name</h5>
                </div>
                <div class="col-sm-4">
                    <button class="btn btn-danger float-right" type="button"><span class="oi oi-trash" aria-hidden="true" @onclick="@OnDeleteServant" /></button>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (Servant.Goals != null && Servant.Goals.Count > 0)
            {
                <BSTabGroup>
                    <BSTabList>
                        @for (int i = 0; i < Servant.Goals.Count; i++)
                        {
                            var li = i; // local i, get an indexOutOfRange exception when just using i??
                            <BSTab>
                                <BSTabLabel>@Servant.Goals[li].Name</BSTabLabel>
                                <BSTabContent>
                                    <GoalComponent Goal="@Servant.Goals[li]"
                                                   Key="@li"
                                                   CompleteGoal="@CompleteGoal" />
                                </BSTabContent>
                            </BSTab>
                        }
                    </BSTabList>
                    <BSTabSelectedContent />
                </BSTabGroup>
            }
        </div>
        <div class="card-footer">
            <form>
                <div class="row">
                    <div class="col-sm-12 col-md-8">
                        <input type="text" class="form-control" @bind="@newGoalName" />
                    </div>
                    <div class="col-sm-12 col-md-4">
                        <button type="button" class="btn btn-primary" @onclick="@OnAddGoal" disabled="@CannotAddGoal">New Goal</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
}

@code {
    #region Parameters
    [Parameter]
    public Servant Servant { get; set; }

    [Parameter]
    public Action<int> DeleteServant { get; set; }

    [Parameter]
    public int Key { get; set; }
    #endregion

    string newGoalName { get; set; } = "";

    void OnDeleteServant()
    {
        DeleteServant?.Invoke(Key);
    }

    private bool CannotAddGoal => Servant.Goals.Any(x => x.Name == newGoalName);

    private void OnAddGoal()
    {
        if (!CannotAddGoal)
        {
            Servant.Goals.Add(new Goal()
            {
                Name = newGoalName,
                Materials = new Dictionary<string, int>()
            });

            newGoalName = "";
        }
    }

    void CompleteGoal(int key)
    {
        if (key >= 0 && key < Servant.Goals.Count)
        {
            Servant.Goals.RemoveAt(key);
            // TODO: Update inventory

            StateHasChanged();
        }

    }

}
