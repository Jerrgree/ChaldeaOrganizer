@using Blazored.Typeahead
@using ChaldeaCommon.Extensions
@using ChaldeaCommon.Data
@using ChaldeaCommon.Enums
@using ChaldeaOrganizer.Models
@using BlazorStrap

@inherits NewItemModalBase<MaterialQuantityChangedArgs>

<BSModal IsOpen="@IsOpen" NoBackdrop="true" Class="@ModalClass">
    <BSModalHeader OnClick="Cancel">
        New Material
    </BSModalHeader>
    <BSModalBody>
        <div class="col-sm-8 col-md-8">
            <div class="form-group">
                <label>Item</label>
                <BlazoredTypeahead SearchMethod="@SearchForMaterials"
                                   @bind-Value="@materialInput">
                    <SelectedTemplate>
                        @context.GetMaterialLabel()
                    </SelectedTemplate>
                    <ResultTemplate>
                        <img src="/Assets/@(context).png" /> @context.GetMaterialLabel()
                    </ResultTemplate>
                </BlazoredTypeahead>
            </div>
        </div>
        <div class="col-sm-4 col-md-4">
            <div class="form-group">
                <label>Quantity</label>
                <input class="form-control" @bind="@quantity" />
            </div>
        </div>
    </BSModalBody>
    <BSModalFooter>
        <button type="button" @onclick="@Cancel" class="btn btn-danger">Cancel</button>
        <button type="button" @onclick="@OnAddItem" class="btn btn-success" disabled="@CannotAddItem">Save</button>
    </BSModalFooter>
</BSModal>

@code {
    protected override bool CannotAddItem => materialInput == Material.Unkown || quantity <= 0;

    private Material materialInput;

    private int quantity = 0;

    protected Task<IEnumerable<Material>> SearchForMaterials(string query)
    {
        query = query.ToLower();
        return Task.FromResult(Materials
            .GetMaterials()
            .Where(x => x.GetMaterialLabel().ToLower().Contains(query)));
    }

    protected override void Reset()
    {
        materialInput = Material.Unkown;
        quantity = 0;
        IsOpen = false;
    }

    protected override MaterialQuantityChangedArgs BuildNewItem()
    {
        return new MaterialQuantityChangedArgs()
        {
            Material = materialInput,
            Quantity = quantity
        };
    }
}