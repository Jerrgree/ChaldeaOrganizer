@using ChaldeaCommon.Models
@using ChaldeaOrganizer.Helpers

@if (Goal != null && Goal.Materials != null)
{
    <div>
        <table class="table table-bordered table-hover">
            <thead class="@tableclass">
                <tr>
                    <th>@Goal.Name</th>
                    <th>Material</th>
                    <th>Needed</th>
                    <th>Owned</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var material in Goal.Materials)
                {
                    <tr>
                        <td><img src="/Assets/@(material.Key).png" /></td>
                        <td>@material.Key.GetMaterialLabel()</td>
                        <td>@material.Value</td>
                        <td>@Inventory[material.Key]</td>
                    </tr>
                }
            </tbody>
        </table>
        <div>
            <div class="row">
                <div class="col">
                    <button type="button" class="btn btn-primary">
                        Add Material
                    </button>
                </div>
                <div class="col col-sm-6">
                    <button type="button" class="btn btn-success float-right" @onclick="@OnCompleteGoal" disabled="@CannotCompleteGoal">
                        Complete Goal
                    </button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public Goal Goal { get; set; }

    [Parameter]
    public int Key { get; set; }

    [Parameter]
    public Action<int> CompleteGoal { get; set; }

    [Parameter]
    public Dictionary<string, int> Inventory { get; set; }

    private bool CanCompleteGoal => Goal.Materials.Aggregate(true, (acc, x) => acc && Inventory[x.Key] >= x.Value);

    private bool CannotCompleteGoal => !CanCompleteGoal;

    private string tableclass => CanCompleteGoal ? "table-success" : "table-danger";

    void OnCompleteGoal()
    {
        CompleteGoal?.Invoke(Key);
    }
}
