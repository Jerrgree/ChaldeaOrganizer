@using ChaldeaCommon.Models
@using ChaldeaCommon.Extensions
@using ChaldeaCommon.Enums
@using ChaldeaOrganizer.Models

@if (Goal != null && Goal.Materials != null)
{
    <div>
        <table class="table table-bordered table-hover">
            <thead class="@tableclass">
                <tr>
                    <th>@Goal.Name</th>
                    <th>Material</th>
                    <th>Needed</th>
                    <th>Owned</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var material in Goal.Materials)
                {
                    <tr>
                        <td><img src="/Assets/@(material.Key).png" /></td>
                        <td>@material.Key.GetMaterialLabel()</td>
                        <td>@material.Value</td>
                        <td>
                            <input type="number" class="form-control" value="@Inventory[material.Key]" @onchange="(eventargs) => OnInventoryChanged(material.Key, eventargs.Value)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div>
            <div class="row">
                <div class="col">
                    <button type="button" class="btn btn-primary" @onclick="() => { ShowModal = true;  }">
                        Add Material
                    </button>
                </div>
                <div class="col col-sm-6">
                    <button type="button" class="btn btn-success float-right" @onclick="@OnCompleteGoal" disabled="@CannotCompleteGoal">
                        Complete Goal
                    </button>
                </div>
            </div>
        </div>
        <AddMaterialModal IsOpen="@ShowModal"
                          AddItem="@OnAddMaterialToGoal"
                          CloseModal="@CloseModal" />
    </div>
}

@code {
    #region Parameters
    [Parameter]
    public Goal Goal { get; set; }

    [Parameter]
    public string Key { get; set; }

    [Parameter]
    public EventCallback<string> CompleteGoal { get; set; }

    [Parameter]
    public Dictionary<Material, int> Inventory { get; set; }

    [Parameter]
    public EventCallback<MaterialQuantityChangedArgs> ChangeInventoryMat { get; set; }

    [Parameter]
    public EventCallback<GoalMaterialChangedArgs> AddMaterialToGoal { get; set; }

    #endregion
    private bool CanCompleteGoal => Goal.Materials.Aggregate(true, (acc, x) => acc && Inventory[x.Key] >= x.Value);

    private bool CannotCompleteGoal => !CanCompleteGoal;

    private string tableclass => CanCompleteGoal ? "table-success" : "table-danger";

    private bool ShowModal = false;

    async Task OnCompleteGoal()
    {
        await CompleteGoal.InvokeAsync(Key);
    }

    async Task OnInventoryChanged(Material material, object value)
    {

        if (int.TryParse(value.ToString(), out int num))
        {
            await ChangeInventoryMat.InvokeAsync(new MaterialQuantityChangedArgs()
            {
                Material = material,
                Quantity = num
            });
        }
    }

    async Task OnAddMaterialToGoal(MaterialQuantityChangedArgs args)
    {
        await AddMaterialToGoal.InvokeAsync(new GoalMaterialChangedArgs()
        {
            GoalName = Key,
            Material = args.Material,
            Quantity = args.Quantity
        });
        ShowModal = false;
        StateHasChanged();
    }

    void CloseModal()
    {
        ShowModal = false;
        StateHasChanged();
    }
}